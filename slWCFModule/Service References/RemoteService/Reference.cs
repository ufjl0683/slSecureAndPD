//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.34014
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace slWCFModule.RemoteService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBChangedConstant", Namespace="http://schemas.datacontract.org/2004/07/SecureServer")]
    public enum DBChangedConstant : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuthorityChanged = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteService.ISecureService", CallbackContract=typeof(slWCFModule.RemoteService.ISecureServiceCallback))]
    public interface ISecureService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/Register", ReplyAction="http://tempuri.org/ISecureService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string pcname, System.AsyncCallback callback, object asyncState);
        
        string EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/NotifyDBChange", ReplyAction="http://tempuri.org/ISecureService/NotifyDBChangeResponse")]
        System.IAsyncResult BeginNotifyDBChange(slWCFModule.RemoteService.DBChangedConstant constant, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyDBChange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/ToServerHello", ReplyAction="http://tempuri.org/ISecureService/ToServerHelloResponse")]
        System.IAsyncResult BeginToServerHello(System.AsyncCallback callback, object asyncState);
        
        void EndToServerHello(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/UnRegist", ReplyAction="http://tempuri.org/ISecureService/UnRegistResponse")]
        System.IAsyncResult BeginUnRegist(string guid, System.AsyncCallback callback, object asyncState);
        
        void EndUnRegist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/ForceOpenDoor", ReplyAction="http://tempuri.org/ISecureService/ForceOpenDoorResponse")]
        System.IAsyncResult BeginForceOpenDoor(string ControllID, System.AsyncCallback callback, object asyncState);
        
        void EndForceOpenDoor(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecureServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISecureService/SayHello")]
        void SayHello(string hello);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecureServiceChannel : slWCFModule.RemoteService.ISecureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecureServiceClient : System.ServiceModel.DuplexClientBase<slWCFModule.RemoteService.ISecureService>, slWCFModule.RemoteService.ISecureService {
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginNotifyDBChangeDelegate;
        
        private EndOperationDelegate onEndNotifyDBChangeDelegate;
        
        private System.Threading.SendOrPostCallback onNotifyDBChangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginToServerHelloDelegate;
        
        private EndOperationDelegate onEndToServerHelloDelegate;
        
        private System.Threading.SendOrPostCallback onToServerHelloCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnRegistDelegate;
        
        private EndOperationDelegate onEndUnRegistDelegate;
        
        private System.Threading.SendOrPostCallback onUnRegistCompletedDelegate;
        
        private BeginOperationDelegate onBeginForceOpenDoorDelegate;
        
        private EndOperationDelegate onEndForceOpenDoorDelegate;
        
        private System.Threading.SendOrPostCallback onForceOpenDoorCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public SecureServiceClient(string endpointConfigurationName) : 
                this(new SecureServiceClientCallback(), endpointConfigurationName) {
        }
        
        private SecureServiceClient(SecureServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public SecureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new SecureServiceClientCallback(), binding, remoteAddress) {
        }
        
        private SecureServiceClient(SecureServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public SecureServiceClient() : 
                this(new SecureServiceClientCallback()) {
        }
        
        private SecureServiceClient(SecureServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyDBChangeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ToServerHelloCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnRegistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ForceOpenDoorCompleted;
        
        public event System.EventHandler<SayHelloReceivedEventArgs> SayHelloReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginRegister(string pcname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(pcname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string slWCFModule.RemoteService.ISecureService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string pcname = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginRegister(pcname, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            string retVal = ((slWCFModule.RemoteService.ISecureService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string pcname) {
            this.RegisterAsync(pcname, null);
        }
        
        public void RegisterAsync(string pcname, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        pcname}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginNotifyDBChange(slWCFModule.RemoteService.DBChangedConstant constant, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotifyDBChange(constant, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndNotifyDBChange(System.IAsyncResult result) {
            base.Channel.EndNotifyDBChange(result);
        }
        
        private System.IAsyncResult OnBeginNotifyDBChange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            slWCFModule.RemoteService.DBChangedConstant constant = ((slWCFModule.RemoteService.DBChangedConstant)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginNotifyDBChange(constant, callback, asyncState);
        }
        
        private object[] OnEndNotifyDBChange(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndNotifyDBChange(result);
            return null;
        }
        
        private void OnNotifyDBChangeCompleted(object state) {
            if ((this.NotifyDBChangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotifyDBChangeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotifyDBChangeAsync(slWCFModule.RemoteService.DBChangedConstant constant) {
            this.NotifyDBChangeAsync(constant, null);
        }
        
        public void NotifyDBChangeAsync(slWCFModule.RemoteService.DBChangedConstant constant, object userState) {
            if ((this.onBeginNotifyDBChangeDelegate == null)) {
                this.onBeginNotifyDBChangeDelegate = new BeginOperationDelegate(this.OnBeginNotifyDBChange);
            }
            if ((this.onEndNotifyDBChangeDelegate == null)) {
                this.onEndNotifyDBChangeDelegate = new EndOperationDelegate(this.OnEndNotifyDBChange);
            }
            if ((this.onNotifyDBChangeCompletedDelegate == null)) {
                this.onNotifyDBChangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotifyDBChangeCompleted);
            }
            base.InvokeAsync(this.onBeginNotifyDBChangeDelegate, new object[] {
                        constant}, this.onEndNotifyDBChangeDelegate, this.onNotifyDBChangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginToServerHello(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginToServerHello(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndToServerHello(System.IAsyncResult result) {
            base.Channel.EndToServerHello(result);
        }
        
        private System.IAsyncResult OnBeginToServerHello(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginToServerHello(callback, asyncState);
        }
        
        private object[] OnEndToServerHello(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndToServerHello(result);
            return null;
        }
        
        private void OnToServerHelloCompleted(object state) {
            if ((this.ToServerHelloCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ToServerHelloCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ToServerHelloAsync() {
            this.ToServerHelloAsync(null);
        }
        
        public void ToServerHelloAsync(object userState) {
            if ((this.onBeginToServerHelloDelegate == null)) {
                this.onBeginToServerHelloDelegate = new BeginOperationDelegate(this.OnBeginToServerHello);
            }
            if ((this.onEndToServerHelloDelegate == null)) {
                this.onEndToServerHelloDelegate = new EndOperationDelegate(this.OnEndToServerHello);
            }
            if ((this.onToServerHelloCompletedDelegate == null)) {
                this.onToServerHelloCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnToServerHelloCompleted);
            }
            base.InvokeAsync(this.onBeginToServerHelloDelegate, null, this.onEndToServerHelloDelegate, this.onToServerHelloCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginUnRegist(string guid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnRegist(guid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndUnRegist(System.IAsyncResult result) {
            base.Channel.EndUnRegist(result);
        }
        
        private System.IAsyncResult OnBeginUnRegist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string guid = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginUnRegist(guid, callback, asyncState);
        }
        
        private object[] OnEndUnRegist(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndUnRegist(result);
            return null;
        }
        
        private void OnUnRegistCompleted(object state) {
            if ((this.UnRegistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnRegistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnRegistAsync(string guid) {
            this.UnRegistAsync(guid, null);
        }
        
        public void UnRegistAsync(string guid, object userState) {
            if ((this.onBeginUnRegistDelegate == null)) {
                this.onBeginUnRegistDelegate = new BeginOperationDelegate(this.OnBeginUnRegist);
            }
            if ((this.onEndUnRegistDelegate == null)) {
                this.onEndUnRegistDelegate = new EndOperationDelegate(this.OnEndUnRegist);
            }
            if ((this.onUnRegistCompletedDelegate == null)) {
                this.onUnRegistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnRegistCompleted);
            }
            base.InvokeAsync(this.onBeginUnRegistDelegate, new object[] {
                        guid}, this.onEndUnRegistDelegate, this.onUnRegistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginForceOpenDoor(string ControllID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForceOpenDoor(ControllID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndForceOpenDoor(System.IAsyncResult result) {
            base.Channel.EndForceOpenDoor(result);
        }
        
        private System.IAsyncResult OnBeginForceOpenDoor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string ControllID = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginForceOpenDoor(ControllID, callback, asyncState);
        }
        
        private object[] OnEndForceOpenDoor(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndForceOpenDoor(result);
            return null;
        }
        
        private void OnForceOpenDoorCompleted(object state) {
            if ((this.ForceOpenDoorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForceOpenDoorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForceOpenDoorAsync(string ControllID) {
            this.ForceOpenDoorAsync(ControllID, null);
        }
        
        public void ForceOpenDoorAsync(string ControllID, object userState) {
            if ((this.onBeginForceOpenDoorDelegate == null)) {
                this.onBeginForceOpenDoorDelegate = new BeginOperationDelegate(this.OnBeginForceOpenDoor);
            }
            if ((this.onEndForceOpenDoorDelegate == null)) {
                this.onEndForceOpenDoorDelegate = new EndOperationDelegate(this.OnEndForceOpenDoor);
            }
            if ((this.onForceOpenDoorCompletedDelegate == null)) {
                this.onForceOpenDoorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForceOpenDoorCompleted);
            }
            base.InvokeAsync(this.onBeginForceOpenDoorDelegate, new object[] {
                        ControllID}, this.onEndForceOpenDoorDelegate, this.onForceOpenDoorCompletedDelegate, userState);
        }
        
        private void OnSayHelloReceived(object state) {
            if ((this.SayHelloReceived != null)) {
                object[] results = ((object[])(state));
                this.SayHelloReceived(this, new SayHelloReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.SayHelloReceived != null))) {
                throw new System.InvalidOperationException("指定回呼 InstanceContext 後即無法使用回呼事件。請選擇指定回呼 InstanceContext，或是描述回呼事件。");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override slWCFModule.RemoteService.ISecureService CreateChannel() {
            return new SecureServiceClientChannel(this);
        }
        
        private class SecureServiceClientCallback : object, ISecureServiceCallback {
            
            private SecureServiceClient proxy;
            
            public void Initialize(SecureServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void SayHello(string hello) {
                this.proxy.OnSayHelloReceived(new object[] {
                            hello});
            }
        }
        
        private class SecureServiceClientChannel : ChannelBase<slWCFModule.RemoteService.ISecureService>, slWCFModule.RemoteService.ISecureService {
            
            public SecureServiceClientChannel(System.ServiceModel.DuplexClientBase<slWCFModule.RemoteService.ISecureService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegister(string pcname, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = pcname;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNotifyDBChange(slWCFModule.RemoteService.DBChangedConstant constant, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = constant;
                System.IAsyncResult _result = base.BeginInvoke("NotifyDBChange", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNotifyDBChange(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NotifyDBChange", _args, result);
            }
            
            public System.IAsyncResult BeginToServerHello(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ToServerHello", _args, callback, asyncState);
                return _result;
            }
            
            public void EndToServerHello(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ToServerHello", _args, result);
            }
            
            public System.IAsyncResult BeginUnRegist(string guid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = guid;
                System.IAsyncResult _result = base.BeginInvoke("UnRegist", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnRegist(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnRegist", _args, result);
            }
            
            public System.IAsyncResult BeginForceOpenDoor(string ControllID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ControllID;
                System.IAsyncResult _result = base.BeginInvoke("ForceOpenDoor", _args, callback, asyncState);
                return _result;
            }
            
            public void EndForceOpenDoor(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ForceOpenDoor", _args, result);
            }
        }
    }
    
    public class SayHelloReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SayHelloReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string hello {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
