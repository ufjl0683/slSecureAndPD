//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.34014
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace slWCFModule.RemoteService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBChangedConstant", Namespace="http://schemas.datacontract.org/2004/07/SecureServer")]
    public enum DBChangedConstant : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AuthorityChanged = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoorOpenAutoCloseTime = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoorOpenAlarmTime = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoorPasswordTimeCycle = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EventIntrusion = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EventDoorOpenOverTime = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EventInvalidCard = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EventExternalForce = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EventDoorOpen = 8,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorBindingData", Namespace="http://schemas.datacontract.org/2004/07/SecureServer.BindingData")]
    public partial class DoorBindingData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ControlIDField;
        
        private string DoorColorStringField;
        
        private bool IsConnectedField;
        
        private bool IsDoorOpenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ControlID {
            get {
                return this.ControlIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ControlIDField, value) != true)) {
                    this.ControlIDField = value;
                    this.RaisePropertyChanged("ControlID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DoorColorString {
            get {
                return this.DoorColorStringField;
            }
            set {
                if ((object.ReferenceEquals(this.DoorColorStringField, value) != true)) {
                    this.DoorColorStringField = value;
                    this.RaisePropertyChanged("DoorColorString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDoorOpen {
            get {
                return this.IsDoorOpenField;
            }
            set {
                if ((this.IsDoorOpenField.Equals(value) != true)) {
                    this.IsDoorOpenField = value;
                    this.RaisePropertyChanged("IsDoorOpen");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CCTVBindingData", Namespace="http://schemas.datacontract.org/2004/07/SecureServer.BindingData")]
    public partial class CCTVBindingData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int CCTVIDField;
        
        private string CCTVNameField;
        
        private string IPField;
        
        private string MjpegCgiStringField;
        
        private string PasswordField;
        
        private int PlaneIDField;
        
        private int PortField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CCTVID {
            get {
                return this.CCTVIDField;
            }
            set {
                if ((this.CCTVIDField.Equals(value) != true)) {
                    this.CCTVIDField = value;
                    this.RaisePropertyChanged("CCTVID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CCTVName {
            get {
                return this.CCTVNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CCTVNameField, value) != true)) {
                    this.CCTVNameField = value;
                    this.RaisePropertyChanged("CCTVName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IP {
            get {
                return this.IPField;
            }
            set {
                if ((object.ReferenceEquals(this.IPField, value) != true)) {
                    this.IPField = value;
                    this.RaisePropertyChanged("IP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MjpegCgiString {
            get {
                return this.MjpegCgiStringField;
            }
            set {
                if ((object.ReferenceEquals(this.MjpegCgiStringField, value) != true)) {
                    this.MjpegCgiStringField = value;
                    this.RaisePropertyChanged("MjpegCgiString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaneID {
            get {
                return this.PlaneIDField;
            }
            set {
                if ((this.PlaneIDField.Equals(value) != true)) {
                    this.PlaneIDField = value;
                    this.RaisePropertyChanged("PlaneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemBindingData", Namespace="http://schemas.datacontract.org/2004/07/SecureServer.BindingData")]
    public partial class ItemBindingData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ColorStringField;
        
        private string ContentField;
        
        private int ItemIDField;
        
        private int PlaneIDField;
        
        private string TypeField;
        
        private double ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColorString {
            get {
                return this.ColorStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorStringField, value) != true)) {
                    this.ColorStringField = value;
                    this.RaisePropertyChanged("ColorString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemID {
            get {
                return this.ItemIDField;
            }
            set {
                if ((this.ItemIDField.Equals(value) != true)) {
                    this.ItemIDField = value;
                    this.RaisePropertyChanged("ItemID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaneID {
            get {
                return this.PlaneIDField;
            }
            set {
                if ((this.PlaneIDField.Equals(value) != true)) {
                    this.PlaneIDField = value;
                    this.RaisePropertyChanged("PlaneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DoorEventType", Namespace="http://schemas.datacontract.org/2004/07/SecureServer.CardReader")]
    public enum DoorEventType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoorOpen = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoorClose = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DisConnected = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmData", Namespace="http://schemas.datacontract.org/2004/07/SecureServer")]
    public partial class AlarmData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private slWCFModule.RemoteService.AlarmType AlarmTypeField;
        
        private slWCFModule.RemoteService.CCTVBindingData CCTVBindingDataField;
        
        private string ColorStringField;
        
        private string DescriptionField;
        
        private bool IsForkCCTVEventField;
        
        private int PlaneIDField;
        
        private string PlaneNameField;
        
        private System.DateTime TimeStampField;
        
        private string TimeStampStringField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public slWCFModule.RemoteService.AlarmType AlarmType {
            get {
                return this.AlarmTypeField;
            }
            set {
                if ((this.AlarmTypeField.Equals(value) != true)) {
                    this.AlarmTypeField = value;
                    this.RaisePropertyChanged("AlarmType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public slWCFModule.RemoteService.CCTVBindingData CCTVBindingData {
            get {
                return this.CCTVBindingDataField;
            }
            set {
                if ((object.ReferenceEquals(this.CCTVBindingDataField, value) != true)) {
                    this.CCTVBindingDataField = value;
                    this.RaisePropertyChanged("CCTVBindingData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColorString {
            get {
                return this.ColorStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorStringField, value) != true)) {
                    this.ColorStringField = value;
                    this.RaisePropertyChanged("ColorString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsForkCCTVEvent {
            get {
                return this.IsForkCCTVEventField;
            }
            set {
                if ((this.IsForkCCTVEventField.Equals(value) != true)) {
                    this.IsForkCCTVEventField = value;
                    this.RaisePropertyChanged("IsForkCCTVEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaneID {
            get {
                return this.PlaneIDField;
            }
            set {
                if ((this.PlaneIDField.Equals(value) != true)) {
                    this.PlaneIDField = value;
                    this.RaisePropertyChanged("PlaneID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlaneName {
            get {
                return this.PlaneNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaneNameField, value) != true)) {
                    this.PlaneNameField = value;
                    this.RaisePropertyChanged("PlaneName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeStampString {
            get {
                return this.TimeStampStringField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeStampStringField, value) != true)) {
                    this.TimeStampStringField = value;
                    this.RaisePropertyChanged("TimeStampString");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlarmType", Namespace="http://schemas.datacontract.org/2004/07/SecureServer")]
    public enum AlarmType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Secure = 0,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteService.ISecureService", CallbackContract=typeof(slWCFModule.RemoteService.ISecureServiceCallback))]
    public interface ISecureService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/Register", ReplyAction="http://tempuri.org/ISecureService/RegisterResponse")]
        System.IAsyncResult BeginRegister(string pcname, System.AsyncCallback callback, object asyncState);
        
        string EndRegister(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/NotifyDBChange", ReplyAction="http://tempuri.org/ISecureService/NotifyDBChangeResponse")]
        System.IAsyncResult BeginNotifyDBChange(slWCFModule.RemoteService.DBChangedConstant constant, string value, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyDBChange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/ToServerHello", ReplyAction="http://tempuri.org/ISecureService/ToServerHelloResponse")]
        System.IAsyncResult BeginToServerHello(System.AsyncCallback callback, object asyncState);
        
        void EndToServerHello(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/UnRegist", ReplyAction="http://tempuri.org/ISecureService/UnRegistResponse")]
        System.IAsyncResult BeginUnRegist(string guid, System.AsyncCallback callback, object asyncState);
        
        void EndUnRegist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/ForceOpenDoor", ReplyAction="http://tempuri.org/ISecureService/ForceOpenDoorResponse")]
        System.IAsyncResult BeginForceOpenDoor(string ControllID, System.AsyncCallback callback, object asyncState);
        
        void EndForceOpenDoor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/HookCardReaderEvent", ReplyAction="http://tempuri.org/ISecureService/HookCardReaderEventResponse")]
        System.IAsyncResult BeginHookCardReaderEvent(string key, int PlaneId, System.AsyncCallback callback, object asyncState);
        
        void EndHookCardReaderEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/HookAlarmEvent", ReplyAction="http://tempuri.org/ISecureService/HookAlarmEventResponse")]
        System.IAsyncResult BeginHookAlarmEvent(string key, System.AsyncCallback callback, object asyncState);
        
        void EndHookAlarmEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/GetALLDoorBindingData", ReplyAction="http://tempuri.org/ISecureService/GetALLDoorBindingDataResponse")]
        System.IAsyncResult BeginGetALLDoorBindingData(int PlaneID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData> EndGetALLDoorBindingData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/GetAllCCTVBindingData", ReplyAction="http://tempuri.org/ISecureService/GetAllCCTVBindingDataResponse")]
        System.IAsyncResult BeginGetAllCCTVBindingData(int PlaneID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData> EndGetAllCCTVBindingData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/HookItemValueChangedEvent", ReplyAction="http://tempuri.org/ISecureService/HookItemValueChangedEventResponse")]
        System.IAsyncResult BeginHookItemValueChangedEvent(string key, int PlaneId, System.AsyncCallback callback, object asyncState);
        
        void EndHookItemValueChangedEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/GetAllItemBindingData", ReplyAction="http://tempuri.org/ISecureService/GetAllItemBindingDataResponse")]
        System.IAsyncResult BeginGetAllItemBindingData(int PlaneID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData> EndGetAllItemBindingData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISecureService/SetItemDOValue", ReplyAction="http://tempuri.org/ISecureService/SetItemDOValueResponse")]
        System.IAsyncResult BeginSetItemDOValue(int ItemID, bool val, System.AsyncCallback callback, object asyncState);
        
        void EndSetItemDOValue(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecureServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISecureService/SayHello")]
        void SayHello(string hello);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISecureService/SecureDoorEvent")]
        void SecureDoorEvent(slWCFModule.RemoteService.DoorEventType evttype, slWCFModule.RemoteService.DoorBindingData doorBindingData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISecureService/SecureAlarm")]
        void SecureAlarm(slWCFModule.RemoteService.AlarmData alarmdata);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISecureService/ItemValueChangedEvenr")]
        void ItemValueChangedEvenr(slWCFModule.RemoteService.ItemBindingData ItemBindingData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecureServiceChannel : slWCFModule.RemoteService.ISecureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetALLDoorBindingDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetALLDoorBindingDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllCCTVBindingDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllCCTVBindingDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllItemBindingDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllItemBindingDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecureServiceClient : System.ServiceModel.DuplexClientBase<slWCFModule.RemoteService.ISecureService>, slWCFModule.RemoteService.ISecureService {
        
        private BeginOperationDelegate onBeginRegisterDelegate;
        
        private EndOperationDelegate onEndRegisterDelegate;
        
        private System.Threading.SendOrPostCallback onRegisterCompletedDelegate;
        
        private BeginOperationDelegate onBeginNotifyDBChangeDelegate;
        
        private EndOperationDelegate onEndNotifyDBChangeDelegate;
        
        private System.Threading.SendOrPostCallback onNotifyDBChangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginToServerHelloDelegate;
        
        private EndOperationDelegate onEndToServerHelloDelegate;
        
        private System.Threading.SendOrPostCallback onToServerHelloCompletedDelegate;
        
        private BeginOperationDelegate onBeginUnRegistDelegate;
        
        private EndOperationDelegate onEndUnRegistDelegate;
        
        private System.Threading.SendOrPostCallback onUnRegistCompletedDelegate;
        
        private BeginOperationDelegate onBeginForceOpenDoorDelegate;
        
        private EndOperationDelegate onEndForceOpenDoorDelegate;
        
        private System.Threading.SendOrPostCallback onForceOpenDoorCompletedDelegate;
        
        private BeginOperationDelegate onBeginHookCardReaderEventDelegate;
        
        private EndOperationDelegate onEndHookCardReaderEventDelegate;
        
        private System.Threading.SendOrPostCallback onHookCardReaderEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginHookAlarmEventDelegate;
        
        private EndOperationDelegate onEndHookAlarmEventDelegate;
        
        private System.Threading.SendOrPostCallback onHookAlarmEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetALLDoorBindingDataDelegate;
        
        private EndOperationDelegate onEndGetALLDoorBindingDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetALLDoorBindingDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllCCTVBindingDataDelegate;
        
        private EndOperationDelegate onEndGetAllCCTVBindingDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllCCTVBindingDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginHookItemValueChangedEventDelegate;
        
        private EndOperationDelegate onEndHookItemValueChangedEventDelegate;
        
        private System.Threading.SendOrPostCallback onHookItemValueChangedEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllItemBindingDataDelegate;
        
        private EndOperationDelegate onEndGetAllItemBindingDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllItemBindingDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetItemDOValueDelegate;
        
        private EndOperationDelegate onEndSetItemDOValueDelegate;
        
        private System.Threading.SendOrPostCallback onSetItemDOValueCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SecureServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public SecureServiceClient(string endpointConfigurationName) : 
                this(new SecureServiceClientCallback(), endpointConfigurationName) {
        }
        
        private SecureServiceClient(SecureServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public SecureServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new SecureServiceClientCallback(), binding, remoteAddress) {
        }
        
        private SecureServiceClient(SecureServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public SecureServiceClient() : 
                this(new SecureServiceClientCallback()) {
        }
        
        private SecureServiceClient(SecureServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("無法設定 CookieContainer。請確定繫結包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<RegisterCompletedEventArgs> RegisterCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyDBChangeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ToServerHelloCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UnRegistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ForceOpenDoorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HookCardReaderEventCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HookAlarmEventCompleted;
        
        public event System.EventHandler<GetALLDoorBindingDataCompletedEventArgs> GetALLDoorBindingDataCompleted;
        
        public event System.EventHandler<GetAllCCTVBindingDataCompletedEventArgs> GetAllCCTVBindingDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HookItemValueChangedEventCompleted;
        
        public event System.EventHandler<GetAllItemBindingDataCompletedEventArgs> GetAllItemBindingDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetItemDOValueCompleted;
        
        public event System.EventHandler<SayHelloReceivedEventArgs> SayHelloReceived;
        
        public event System.EventHandler<SecureDoorEventReceivedEventArgs> SecureDoorEventReceived;
        
        public event System.EventHandler<SecureAlarmReceivedEventArgs> SecureAlarmReceived;
        
        public event System.EventHandler<ItemValueChangedEvenrReceivedEventArgs> ItemValueChangedEvenrReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginRegister(string pcname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegister(pcname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string slWCFModule.RemoteService.ISecureService.EndRegister(System.IAsyncResult result) {
            return base.Channel.EndRegister(result);
        }
        
        private System.IAsyncResult OnBeginRegister(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string pcname = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginRegister(pcname, callback, asyncState);
        }
        
        private object[] OnEndRegister(System.IAsyncResult result) {
            string retVal = ((slWCFModule.RemoteService.ISecureService)(this)).EndRegister(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisterCompleted(object state) {
            if ((this.RegisterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisterCompleted(this, new RegisterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisterAsync(string pcname) {
            this.RegisterAsync(pcname, null);
        }
        
        public void RegisterAsync(string pcname, object userState) {
            if ((this.onBeginRegisterDelegate == null)) {
                this.onBeginRegisterDelegate = new BeginOperationDelegate(this.OnBeginRegister);
            }
            if ((this.onEndRegisterDelegate == null)) {
                this.onEndRegisterDelegate = new EndOperationDelegate(this.OnEndRegister);
            }
            if ((this.onRegisterCompletedDelegate == null)) {
                this.onRegisterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisterCompleted);
            }
            base.InvokeAsync(this.onBeginRegisterDelegate, new object[] {
                        pcname}, this.onEndRegisterDelegate, this.onRegisterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginNotifyDBChange(slWCFModule.RemoteService.DBChangedConstant constant, string value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotifyDBChange(constant, value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndNotifyDBChange(System.IAsyncResult result) {
            base.Channel.EndNotifyDBChange(result);
        }
        
        private System.IAsyncResult OnBeginNotifyDBChange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            slWCFModule.RemoteService.DBChangedConstant constant = ((slWCFModule.RemoteService.DBChangedConstant)(inValues[0]));
            string value = ((string)(inValues[1]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginNotifyDBChange(constant, value, callback, asyncState);
        }
        
        private object[] OnEndNotifyDBChange(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndNotifyDBChange(result);
            return null;
        }
        
        private void OnNotifyDBChangeCompleted(object state) {
            if ((this.NotifyDBChangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotifyDBChangeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotifyDBChangeAsync(slWCFModule.RemoteService.DBChangedConstant constant, string value) {
            this.NotifyDBChangeAsync(constant, value, null);
        }
        
        public void NotifyDBChangeAsync(slWCFModule.RemoteService.DBChangedConstant constant, string value, object userState) {
            if ((this.onBeginNotifyDBChangeDelegate == null)) {
                this.onBeginNotifyDBChangeDelegate = new BeginOperationDelegate(this.OnBeginNotifyDBChange);
            }
            if ((this.onEndNotifyDBChangeDelegate == null)) {
                this.onEndNotifyDBChangeDelegate = new EndOperationDelegate(this.OnEndNotifyDBChange);
            }
            if ((this.onNotifyDBChangeCompletedDelegate == null)) {
                this.onNotifyDBChangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotifyDBChangeCompleted);
            }
            base.InvokeAsync(this.onBeginNotifyDBChangeDelegate, new object[] {
                        constant,
                        value}, this.onEndNotifyDBChangeDelegate, this.onNotifyDBChangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginToServerHello(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginToServerHello(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndToServerHello(System.IAsyncResult result) {
            base.Channel.EndToServerHello(result);
        }
        
        private System.IAsyncResult OnBeginToServerHello(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginToServerHello(callback, asyncState);
        }
        
        private object[] OnEndToServerHello(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndToServerHello(result);
            return null;
        }
        
        private void OnToServerHelloCompleted(object state) {
            if ((this.ToServerHelloCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ToServerHelloCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ToServerHelloAsync() {
            this.ToServerHelloAsync(null);
        }
        
        public void ToServerHelloAsync(object userState) {
            if ((this.onBeginToServerHelloDelegate == null)) {
                this.onBeginToServerHelloDelegate = new BeginOperationDelegate(this.OnBeginToServerHello);
            }
            if ((this.onEndToServerHelloDelegate == null)) {
                this.onEndToServerHelloDelegate = new EndOperationDelegate(this.OnEndToServerHello);
            }
            if ((this.onToServerHelloCompletedDelegate == null)) {
                this.onToServerHelloCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnToServerHelloCompleted);
            }
            base.InvokeAsync(this.onBeginToServerHelloDelegate, null, this.onEndToServerHelloDelegate, this.onToServerHelloCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginUnRegist(string guid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUnRegist(guid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndUnRegist(System.IAsyncResult result) {
            base.Channel.EndUnRegist(result);
        }
        
        private System.IAsyncResult OnBeginUnRegist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string guid = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginUnRegist(guid, callback, asyncState);
        }
        
        private object[] OnEndUnRegist(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndUnRegist(result);
            return null;
        }
        
        private void OnUnRegistCompleted(object state) {
            if ((this.UnRegistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UnRegistCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UnRegistAsync(string guid) {
            this.UnRegistAsync(guid, null);
        }
        
        public void UnRegistAsync(string guid, object userState) {
            if ((this.onBeginUnRegistDelegate == null)) {
                this.onBeginUnRegistDelegate = new BeginOperationDelegate(this.OnBeginUnRegist);
            }
            if ((this.onEndUnRegistDelegate == null)) {
                this.onEndUnRegistDelegate = new EndOperationDelegate(this.OnEndUnRegist);
            }
            if ((this.onUnRegistCompletedDelegate == null)) {
                this.onUnRegistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUnRegistCompleted);
            }
            base.InvokeAsync(this.onBeginUnRegistDelegate, new object[] {
                        guid}, this.onEndUnRegistDelegate, this.onUnRegistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginForceOpenDoor(string ControllID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForceOpenDoor(ControllID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndForceOpenDoor(System.IAsyncResult result) {
            base.Channel.EndForceOpenDoor(result);
        }
        
        private System.IAsyncResult OnBeginForceOpenDoor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string ControllID = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginForceOpenDoor(ControllID, callback, asyncState);
        }
        
        private object[] OnEndForceOpenDoor(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndForceOpenDoor(result);
            return null;
        }
        
        private void OnForceOpenDoorCompleted(object state) {
            if ((this.ForceOpenDoorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForceOpenDoorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForceOpenDoorAsync(string ControllID) {
            this.ForceOpenDoorAsync(ControllID, null);
        }
        
        public void ForceOpenDoorAsync(string ControllID, object userState) {
            if ((this.onBeginForceOpenDoorDelegate == null)) {
                this.onBeginForceOpenDoorDelegate = new BeginOperationDelegate(this.OnBeginForceOpenDoor);
            }
            if ((this.onEndForceOpenDoorDelegate == null)) {
                this.onEndForceOpenDoorDelegate = new EndOperationDelegate(this.OnEndForceOpenDoor);
            }
            if ((this.onForceOpenDoorCompletedDelegate == null)) {
                this.onForceOpenDoorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForceOpenDoorCompleted);
            }
            base.InvokeAsync(this.onBeginForceOpenDoorDelegate, new object[] {
                        ControllID}, this.onEndForceOpenDoorDelegate, this.onForceOpenDoorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginHookCardReaderEvent(string key, int PlaneId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHookCardReaderEvent(key, PlaneId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndHookCardReaderEvent(System.IAsyncResult result) {
            base.Channel.EndHookCardReaderEvent(result);
        }
        
        private System.IAsyncResult OnBeginHookCardReaderEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string key = ((string)(inValues[0]));
            int PlaneId = ((int)(inValues[1]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginHookCardReaderEvent(key, PlaneId, callback, asyncState);
        }
        
        private object[] OnEndHookCardReaderEvent(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndHookCardReaderEvent(result);
            return null;
        }
        
        private void OnHookCardReaderEventCompleted(object state) {
            if ((this.HookCardReaderEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HookCardReaderEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HookCardReaderEventAsync(string key, int PlaneId) {
            this.HookCardReaderEventAsync(key, PlaneId, null);
        }
        
        public void HookCardReaderEventAsync(string key, int PlaneId, object userState) {
            if ((this.onBeginHookCardReaderEventDelegate == null)) {
                this.onBeginHookCardReaderEventDelegate = new BeginOperationDelegate(this.OnBeginHookCardReaderEvent);
            }
            if ((this.onEndHookCardReaderEventDelegate == null)) {
                this.onEndHookCardReaderEventDelegate = new EndOperationDelegate(this.OnEndHookCardReaderEvent);
            }
            if ((this.onHookCardReaderEventCompletedDelegate == null)) {
                this.onHookCardReaderEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHookCardReaderEventCompleted);
            }
            base.InvokeAsync(this.onBeginHookCardReaderEventDelegate, new object[] {
                        key,
                        PlaneId}, this.onEndHookCardReaderEventDelegate, this.onHookCardReaderEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginHookAlarmEvent(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHookAlarmEvent(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndHookAlarmEvent(System.IAsyncResult result) {
            base.Channel.EndHookAlarmEvent(result);
        }
        
        private System.IAsyncResult OnBeginHookAlarmEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string key = ((string)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginHookAlarmEvent(key, callback, asyncState);
        }
        
        private object[] OnEndHookAlarmEvent(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndHookAlarmEvent(result);
            return null;
        }
        
        private void OnHookAlarmEventCompleted(object state) {
            if ((this.HookAlarmEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HookAlarmEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HookAlarmEventAsync(string key) {
            this.HookAlarmEventAsync(key, null);
        }
        
        public void HookAlarmEventAsync(string key, object userState) {
            if ((this.onBeginHookAlarmEventDelegate == null)) {
                this.onBeginHookAlarmEventDelegate = new BeginOperationDelegate(this.OnBeginHookAlarmEvent);
            }
            if ((this.onEndHookAlarmEventDelegate == null)) {
                this.onEndHookAlarmEventDelegate = new EndOperationDelegate(this.OnEndHookAlarmEvent);
            }
            if ((this.onHookAlarmEventCompletedDelegate == null)) {
                this.onHookAlarmEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHookAlarmEventCompleted);
            }
            base.InvokeAsync(this.onBeginHookAlarmEventDelegate, new object[] {
                        key}, this.onEndHookAlarmEventDelegate, this.onHookAlarmEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginGetALLDoorBindingData(int PlaneID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetALLDoorBindingData(PlaneID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData> slWCFModule.RemoteService.ISecureService.EndGetALLDoorBindingData(System.IAsyncResult result) {
            return base.Channel.EndGetALLDoorBindingData(result);
        }
        
        private System.IAsyncResult OnBeginGetALLDoorBindingData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int PlaneID = ((int)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginGetALLDoorBindingData(PlaneID, callback, asyncState);
        }
        
        private object[] OnEndGetALLDoorBindingData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData> retVal = ((slWCFModule.RemoteService.ISecureService)(this)).EndGetALLDoorBindingData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetALLDoorBindingDataCompleted(object state) {
            if ((this.GetALLDoorBindingDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetALLDoorBindingDataCompleted(this, new GetALLDoorBindingDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetALLDoorBindingDataAsync(int PlaneID) {
            this.GetALLDoorBindingDataAsync(PlaneID, null);
        }
        
        public void GetALLDoorBindingDataAsync(int PlaneID, object userState) {
            if ((this.onBeginGetALLDoorBindingDataDelegate == null)) {
                this.onBeginGetALLDoorBindingDataDelegate = new BeginOperationDelegate(this.OnBeginGetALLDoorBindingData);
            }
            if ((this.onEndGetALLDoorBindingDataDelegate == null)) {
                this.onEndGetALLDoorBindingDataDelegate = new EndOperationDelegate(this.OnEndGetALLDoorBindingData);
            }
            if ((this.onGetALLDoorBindingDataCompletedDelegate == null)) {
                this.onGetALLDoorBindingDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetALLDoorBindingDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetALLDoorBindingDataDelegate, new object[] {
                        PlaneID}, this.onEndGetALLDoorBindingDataDelegate, this.onGetALLDoorBindingDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginGetAllCCTVBindingData(int PlaneID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllCCTVBindingData(PlaneID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData> slWCFModule.RemoteService.ISecureService.EndGetAllCCTVBindingData(System.IAsyncResult result) {
            return base.Channel.EndGetAllCCTVBindingData(result);
        }
        
        private System.IAsyncResult OnBeginGetAllCCTVBindingData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int PlaneID = ((int)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginGetAllCCTVBindingData(PlaneID, callback, asyncState);
        }
        
        private object[] OnEndGetAllCCTVBindingData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData> retVal = ((slWCFModule.RemoteService.ISecureService)(this)).EndGetAllCCTVBindingData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllCCTVBindingDataCompleted(object state) {
            if ((this.GetAllCCTVBindingDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllCCTVBindingDataCompleted(this, new GetAllCCTVBindingDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllCCTVBindingDataAsync(int PlaneID) {
            this.GetAllCCTVBindingDataAsync(PlaneID, null);
        }
        
        public void GetAllCCTVBindingDataAsync(int PlaneID, object userState) {
            if ((this.onBeginGetAllCCTVBindingDataDelegate == null)) {
                this.onBeginGetAllCCTVBindingDataDelegate = new BeginOperationDelegate(this.OnBeginGetAllCCTVBindingData);
            }
            if ((this.onEndGetAllCCTVBindingDataDelegate == null)) {
                this.onEndGetAllCCTVBindingDataDelegate = new EndOperationDelegate(this.OnEndGetAllCCTVBindingData);
            }
            if ((this.onGetAllCCTVBindingDataCompletedDelegate == null)) {
                this.onGetAllCCTVBindingDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllCCTVBindingDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllCCTVBindingDataDelegate, new object[] {
                        PlaneID}, this.onEndGetAllCCTVBindingDataDelegate, this.onGetAllCCTVBindingDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginHookItemValueChangedEvent(string key, int PlaneId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHookItemValueChangedEvent(key, PlaneId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndHookItemValueChangedEvent(System.IAsyncResult result) {
            base.Channel.EndHookItemValueChangedEvent(result);
        }
        
        private System.IAsyncResult OnBeginHookItemValueChangedEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string key = ((string)(inValues[0]));
            int PlaneId = ((int)(inValues[1]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginHookItemValueChangedEvent(key, PlaneId, callback, asyncState);
        }
        
        private object[] OnEndHookItemValueChangedEvent(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndHookItemValueChangedEvent(result);
            return null;
        }
        
        private void OnHookItemValueChangedEventCompleted(object state) {
            if ((this.HookItemValueChangedEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HookItemValueChangedEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HookItemValueChangedEventAsync(string key, int PlaneId) {
            this.HookItemValueChangedEventAsync(key, PlaneId, null);
        }
        
        public void HookItemValueChangedEventAsync(string key, int PlaneId, object userState) {
            if ((this.onBeginHookItemValueChangedEventDelegate == null)) {
                this.onBeginHookItemValueChangedEventDelegate = new BeginOperationDelegate(this.OnBeginHookItemValueChangedEvent);
            }
            if ((this.onEndHookItemValueChangedEventDelegate == null)) {
                this.onEndHookItemValueChangedEventDelegate = new EndOperationDelegate(this.OnEndHookItemValueChangedEvent);
            }
            if ((this.onHookItemValueChangedEventCompletedDelegate == null)) {
                this.onHookItemValueChangedEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHookItemValueChangedEventCompleted);
            }
            base.InvokeAsync(this.onBeginHookItemValueChangedEventDelegate, new object[] {
                        key,
                        PlaneId}, this.onEndHookItemValueChangedEventDelegate, this.onHookItemValueChangedEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginGetAllItemBindingData(int PlaneID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllItemBindingData(PlaneID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData> slWCFModule.RemoteService.ISecureService.EndGetAllItemBindingData(System.IAsyncResult result) {
            return base.Channel.EndGetAllItemBindingData(result);
        }
        
        private System.IAsyncResult OnBeginGetAllItemBindingData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int PlaneID = ((int)(inValues[0]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginGetAllItemBindingData(PlaneID, callback, asyncState);
        }
        
        private object[] OnEndGetAllItemBindingData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData> retVal = ((slWCFModule.RemoteService.ISecureService)(this)).EndGetAllItemBindingData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllItemBindingDataCompleted(object state) {
            if ((this.GetAllItemBindingDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllItemBindingDataCompleted(this, new GetAllItemBindingDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllItemBindingDataAsync(int PlaneID) {
            this.GetAllItemBindingDataAsync(PlaneID, null);
        }
        
        public void GetAllItemBindingDataAsync(int PlaneID, object userState) {
            if ((this.onBeginGetAllItemBindingDataDelegate == null)) {
                this.onBeginGetAllItemBindingDataDelegate = new BeginOperationDelegate(this.OnBeginGetAllItemBindingData);
            }
            if ((this.onEndGetAllItemBindingDataDelegate == null)) {
                this.onEndGetAllItemBindingDataDelegate = new EndOperationDelegate(this.OnEndGetAllItemBindingData);
            }
            if ((this.onGetAllItemBindingDataCompletedDelegate == null)) {
                this.onGetAllItemBindingDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllItemBindingDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllItemBindingDataDelegate, new object[] {
                        PlaneID}, this.onEndGetAllItemBindingDataDelegate, this.onGetAllItemBindingDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult slWCFModule.RemoteService.ISecureService.BeginSetItemDOValue(int ItemID, bool val, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetItemDOValue(ItemID, val, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void slWCFModule.RemoteService.ISecureService.EndSetItemDOValue(System.IAsyncResult result) {
            base.Channel.EndSetItemDOValue(result);
        }
        
        private System.IAsyncResult OnBeginSetItemDOValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int ItemID = ((int)(inValues[0]));
            bool val = ((bool)(inValues[1]));
            return ((slWCFModule.RemoteService.ISecureService)(this)).BeginSetItemDOValue(ItemID, val, callback, asyncState);
        }
        
        private object[] OnEndSetItemDOValue(System.IAsyncResult result) {
            ((slWCFModule.RemoteService.ISecureService)(this)).EndSetItemDOValue(result);
            return null;
        }
        
        private void OnSetItemDOValueCompleted(object state) {
            if ((this.SetItemDOValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetItemDOValueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetItemDOValueAsync(int ItemID, bool val) {
            this.SetItemDOValueAsync(ItemID, val, null);
        }
        
        public void SetItemDOValueAsync(int ItemID, bool val, object userState) {
            if ((this.onBeginSetItemDOValueDelegate == null)) {
                this.onBeginSetItemDOValueDelegate = new BeginOperationDelegate(this.OnBeginSetItemDOValue);
            }
            if ((this.onEndSetItemDOValueDelegate == null)) {
                this.onEndSetItemDOValueDelegate = new EndOperationDelegate(this.OnEndSetItemDOValue);
            }
            if ((this.onSetItemDOValueCompletedDelegate == null)) {
                this.onSetItemDOValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetItemDOValueCompleted);
            }
            base.InvokeAsync(this.onBeginSetItemDOValueDelegate, new object[] {
                        ItemID,
                        val}, this.onEndSetItemDOValueDelegate, this.onSetItemDOValueCompletedDelegate, userState);
        }
        
        private void OnSayHelloReceived(object state) {
            if ((this.SayHelloReceived != null)) {
                object[] results = ((object[])(state));
                this.SayHelloReceived(this, new SayHelloReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnSecureDoorEventReceived(object state) {
            if ((this.SecureDoorEventReceived != null)) {
                object[] results = ((object[])(state));
                this.SecureDoorEventReceived(this, new SecureDoorEventReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnSecureAlarmReceived(object state) {
            if ((this.SecureAlarmReceived != null)) {
                object[] results = ((object[])(state));
                this.SecureAlarmReceived(this, new SecureAlarmReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnItemValueChangedEvenrReceived(object state) {
            if ((this.ItemValueChangedEvenrReceived != null)) {
                object[] results = ((object[])(state));
                this.ItemValueChangedEvenrReceived(this, new ItemValueChangedEvenrReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && ((((this.SayHelloReceived != null) 
                        || (this.SecureDoorEventReceived != null)) 
                        || (this.SecureAlarmReceived != null)) 
                        || (this.ItemValueChangedEvenrReceived != null)))) {
                throw new System.InvalidOperationException("指定回呼 InstanceContext 後即無法使用回呼事件。請選擇指定回呼 InstanceContext，或是描述回呼事件。");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override slWCFModule.RemoteService.ISecureService CreateChannel() {
            return new SecureServiceClientChannel(this);
        }
        
        private class SecureServiceClientCallback : object, ISecureServiceCallback {
            
            private SecureServiceClient proxy;
            
            public void Initialize(SecureServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void SayHello(string hello) {
                this.proxy.OnSayHelloReceived(new object[] {
                            hello});
            }
            
            public void SecureDoorEvent(slWCFModule.RemoteService.DoorEventType evttype, slWCFModule.RemoteService.DoorBindingData doorBindingData) {
                this.proxy.OnSecureDoorEventReceived(new object[] {
                            evttype,
                            doorBindingData});
            }
            
            public void SecureAlarm(slWCFModule.RemoteService.AlarmData alarmdata) {
                this.proxy.OnSecureAlarmReceived(new object[] {
                            alarmdata});
            }
            
            public void ItemValueChangedEvenr(slWCFModule.RemoteService.ItemBindingData ItemBindingData) {
                this.proxy.OnItemValueChangedEvenrReceived(new object[] {
                            ItemBindingData});
            }
        }
        
        private class SecureServiceClientChannel : ChannelBase<slWCFModule.RemoteService.ISecureService>, slWCFModule.RemoteService.ISecureService {
            
            public SecureServiceClientChannel(System.ServiceModel.DuplexClientBase<slWCFModule.RemoteService.ISecureService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRegister(string pcname, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = pcname;
                System.IAsyncResult _result = base.BeginInvoke("Register", _args, callback, asyncState);
                return _result;
            }
            
            public string EndRegister(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Register", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNotifyDBChange(slWCFModule.RemoteService.DBChangedConstant constant, string value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = constant;
                _args[1] = value;
                System.IAsyncResult _result = base.BeginInvoke("NotifyDBChange", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNotifyDBChange(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NotifyDBChange", _args, result);
            }
            
            public System.IAsyncResult BeginToServerHello(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ToServerHello", _args, callback, asyncState);
                return _result;
            }
            
            public void EndToServerHello(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ToServerHello", _args, result);
            }
            
            public System.IAsyncResult BeginUnRegist(string guid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = guid;
                System.IAsyncResult _result = base.BeginInvoke("UnRegist", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUnRegist(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UnRegist", _args, result);
            }
            
            public System.IAsyncResult BeginForceOpenDoor(string ControllID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ControllID;
                System.IAsyncResult _result = base.BeginInvoke("ForceOpenDoor", _args, callback, asyncState);
                return _result;
            }
            
            public void EndForceOpenDoor(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ForceOpenDoor", _args, result);
            }
            
            public System.IAsyncResult BeginHookCardReaderEvent(string key, int PlaneId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = PlaneId;
                System.IAsyncResult _result = base.BeginInvoke("HookCardReaderEvent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndHookCardReaderEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("HookCardReaderEvent", _args, result);
            }
            
            public System.IAsyncResult BeginHookAlarmEvent(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("HookAlarmEvent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndHookAlarmEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("HookAlarmEvent", _args, result);
            }
            
            public System.IAsyncResult BeginGetALLDoorBindingData(int PlaneID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = PlaneID;
                System.IAsyncResult _result = base.BeginInvoke("GetALLDoorBindingData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData> EndGetALLDoorBindingData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData> _result = ((System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.DoorBindingData>)(base.EndInvoke("GetALLDoorBindingData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllCCTVBindingData(int PlaneID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = PlaneID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllCCTVBindingData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData> EndGetAllCCTVBindingData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData> _result = ((System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.CCTVBindingData>)(base.EndInvoke("GetAllCCTVBindingData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginHookItemValueChangedEvent(string key, int PlaneId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = PlaneId;
                System.IAsyncResult _result = base.BeginInvoke("HookItemValueChangedEvent", _args, callback, asyncState);
                return _result;
            }
            
            public void EndHookItemValueChangedEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("HookItemValueChangedEvent", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllItemBindingData(int PlaneID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = PlaneID;
                System.IAsyncResult _result = base.BeginInvoke("GetAllItemBindingData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData> EndGetAllItemBindingData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData> _result = ((System.Collections.ObjectModel.ObservableCollection<slWCFModule.RemoteService.ItemBindingData>)(base.EndInvoke("GetAllItemBindingData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetItemDOValue(int ItemID, bool val, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = ItemID;
                _args[1] = val;
                System.IAsyncResult _result = base.BeginInvoke("SetItemDOValue", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetItemDOValue(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetItemDOValue", _args, result);
            }
        }
    }
    
    public class SayHelloReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SayHelloReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string hello {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class SecureDoorEventReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SecureDoorEventReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public slWCFModule.RemoteService.DoorEventType evttype {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slWCFModule.RemoteService.DoorEventType)(this.results[0]));
            }
        }
        
        public slWCFModule.RemoteService.DoorBindingData doorBindingData {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slWCFModule.RemoteService.DoorBindingData)(this.results[1]));
            }
        }
    }
    
    public class SecureAlarmReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SecureAlarmReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public slWCFModule.RemoteService.AlarmData alarmdata {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slWCFModule.RemoteService.AlarmData)(this.results[0]));
            }
        }
    }
    
    public class ItemValueChangedEvenrReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ItemValueChangedEvenrReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public slWCFModule.RemoteService.ItemBindingData ItemBindingData {
            get {
                base.RaiseExceptionIfNecessary();
                return ((slWCFModule.RemoteService.ItemBindingData)(this.results[0]));
            }
        }
    }
}
